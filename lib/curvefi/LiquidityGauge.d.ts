/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LiquidityGaugeInterface extends ethers.utils.Interface {
  functions: {
    "user_checkpoint(address)": FunctionFragment;
    "claimable_tokens(address)": FunctionFragment;
    "kick(address)": FunctionFragment;
    "set_approve_deposit(address,bool)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "integrate_checkpoint()": FunctionFragment;
    "minter()": FunctionFragment;
    "crv_token()": FunctionFragment;
    "lp_token()": FunctionFragment;
    "controller()": FunctionFragment;
    "voting_escrow()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "future_epoch_time()": FunctionFragment;
    "approved_to_deposit(address,address)": FunctionFragment;
    "working_balances(address)": FunctionFragment;
    "working_supply()": FunctionFragment;
    "period()": FunctionFragment;
    "period_timestamp(uint256)": FunctionFragment;
    "integrate_inv_supply(uint256)": FunctionFragment;
    "integrate_inv_supply_of(address)": FunctionFragment;
    "integrate_checkpoint_of(address)": FunctionFragment;
    "integrate_fraction(address)": FunctionFragment;
    "inflation_rate()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "user_checkpoint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_tokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kick", values: [string]): string;
  encodeFunctionData(
    functionFragment: "set_approve_deposit",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "crv_token", values?: undefined): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voting_escrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approved_to_deposit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "working_balances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "working_supply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "period_timestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_fraction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "inflation_rate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "user_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_approve_deposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crv_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voting_escrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approved_to_deposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "working_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "working_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "period_timestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_fraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflation_rate",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLiquidityLimit"): EventFragment;
}

export class LiquidityGauge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LiquidityGaugeInterface;

  functions: {
    user_checkpoint(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    kick(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

    "kick(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    set_approve_deposit(
      addr: string,
      can_deposit: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set_approve_deposit(address,bool)"(
      addr: string,
      can_deposit: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    integrate_checkpoint(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "integrate_checkpoint()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minter(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "minter()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    crv_token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "crv_token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    lp_token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "lp_token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    controller(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "controller()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    voting_escrow(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "voting_escrow()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    future_epoch_time(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "future_epoch_time()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approved_to_deposit(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "approved_to_deposit(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    working_supply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "working_supply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    period(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "period()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    inflation_rate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "inflation_rate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  user_checkpoint(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "user_checkpoint(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimable_tokens(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimable_tokens(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  kick(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "kick(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  set_approve_deposit(
    addr: string,
    can_deposit: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set_approve_deposit(address,bool)"(
    addr: string,
    can_deposit: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    _value: BigNumberish,
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

  "integrate_checkpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  minter(overrides?: CallOverrides): Promise<string>;

  "minter()"(overrides?: CallOverrides): Promise<string>;

  crv_token(overrides?: CallOverrides): Promise<string>;

  "crv_token()"(overrides?: CallOverrides): Promise<string>;

  lp_token(overrides?: CallOverrides): Promise<string>;

  "lp_token()"(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  voting_escrow(overrides?: CallOverrides): Promise<string>;

  "voting_escrow()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

  "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  approved_to_deposit(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approved_to_deposit(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "working_balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  working_supply(overrides?: CallOverrides): Promise<BigNumber>;

  "working_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  "period()"(overrides?: CallOverrides): Promise<BigNumber>;

  period_timestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "period_timestamp(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_inv_supply(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_inv_supply(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_inv_supply_of(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_inv_supply_of(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_checkpoint_of(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_checkpoint_of(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_fraction(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_fraction(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

  "inflation_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    user_checkpoint(addr: string, overrides?: CallOverrides): Promise<boolean>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimable_tokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kick(addr: string, overrides?: CallOverrides): Promise<void>;

    "kick(address)"(addr: string, overrides?: CallOverrides): Promise<void>;

    set_approve_deposit(
      addr: string,
      can_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set_approve_deposit(address,bool)"(
      addr: string,
      can_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    "integrate_checkpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<string>;

    "minter()"(overrides?: CallOverrides): Promise<string>;

    crv_token(overrides?: CallOverrides): Promise<string>;

    "crv_token()"(overrides?: CallOverrides): Promise<string>;

    lp_token(overrides?: CallOverrides): Promise<string>;

    "lp_token()"(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    voting_escrow(overrides?: CallOverrides): Promise<string>;

    "voting_escrow()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    approved_to_deposit(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approved_to_deposit(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    "working_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    "period()"(overrides?: CallOverrides): Promise<BigNumber>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "inflation_rate()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Deposit(provider: string | null, value: null): EventFilter;

    Withdraw(provider: string | null, value: null): EventFilter;

    UpdateLiquidityLimit(
      user: null,
      original_balance: null,
      original_supply: null,
      working_balance: null,
      working_supply: null
    ): EventFilter;
  };

  estimateGas: {
    user_checkpoint(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimable_tokens(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    kick(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "kick(address)"(addr: string, overrides?: Overrides): Promise<BigNumber>;

    set_approve_deposit(
      addr: string,
      can_deposit: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set_approve_deposit(address,bool)"(
      addr: string,
      can_deposit: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(_value: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    "integrate_checkpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    "minter()"(overrides?: CallOverrides): Promise<BigNumber>;

    crv_token(overrides?: CallOverrides): Promise<BigNumber>;

    "crv_token()"(overrides?: CallOverrides): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<BigNumber>;

    "lp_token()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    voting_escrow(overrides?: CallOverrides): Promise<BigNumber>;

    "voting_escrow()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    approved_to_deposit(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approved_to_deposit(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    "working_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    "period()"(overrides?: CallOverrides): Promise<BigNumber>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "inflation_rate()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    user_checkpoint(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    kick(addr: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "kick(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    set_approve_deposit(
      addr: string,
      can_deposit: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set_approve_deposit(address,bool)"(
      addr: string,
      can_deposit: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    integrate_checkpoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_checkpoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crv_token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lp_token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voting_escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "voting_escrow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_epoch_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_epoch_time()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approved_to_deposit(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approved_to_deposit(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    working_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "working_supply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "period()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflation_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inflation_rate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
